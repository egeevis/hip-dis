import os
import io
import json
import random
import streamlit as st

try:
    from docx import Document
except ImportError:
    Document = None

try:
    import PyPDF2
except ImportError:
    PyPDF2 = None

try:
    from openai import OpenAI
except ImportError:
    OpenAI = None

st.set_page_config(page_title="Hiperaktivist â€“ EÄŸitim DosyasÄ± Okuma Testi", page_icon="ðŸ§©", layout="wide")
st.title("ðŸ“‚ EÄŸitim & Teknik DosyasÄ± Okuma Testi")
st.caption("Bu araÃ§, yÃ¼klediÄŸin dosyalarÄ±n GPTâ€™ye gerÃ§ekten iletilip iletilmediÄŸini test eder.")

# ------------------------------
# API Key AyarÄ±
# ------------------------------
openai_key = st.sidebar.text_input(
    "OpenAI API Key",
    type="password",
    value=os.getenv("OPENAI_API_KEY", st.secrets.get("OPENAI_API_KEY", "")),
    key="openai_api_key_input"
)

# ------------------------------
# YardÄ±mcÄ± Fonksiyonlar
# ------------------------------
def read_file(file) -> str:
    name = file.name.lower()
    if name.endswith(".txt") or name.endswith(".md"):
        return file.read().decode("utf-8", errors="ignore")
    if name.endswith(".docx"):
        if not Document:
            return "(python-docx eksik)"
        buf = io.BytesIO(file.read())
        doc = Document(buf)
        return "\n".join([p.text for p in doc.paragraphs])
    if name.endswith(".pdf"):
        if not PyPDF2:
            return "(PyPDF2 eksik)"
        buf = io.BytesIO(file.read())
        reader = PyPDF2.PdfReader(buf)
        return "\n".join([p.extract_text() or "" for p in reader.pages])
    try:
        return file.read().decode("utf-8", errors="ignore")
    except Exception:
        return ""

def get_random_snippet(text, length=10):
    """Metinden rastgele bir snippet alÄ±r."""
    words = text.split()
    if len(words) <= length:
        return " ".join(words)
    start = random.randint(0, len(words) - length)
    return " ".join(words[start:start + length])

# ------------------------------
# OpenAI Client
# ------------------------------
client = None
if openai_key and OpenAI:
    try:
        client = OpenAI(api_key=openai_key)
    except Exception as e:
        st.sidebar.error(f"OpenAI istemcisi baÅŸlatÄ±lamadÄ±: {e}")

# ------------------------------
# Dosya YÃ¼kleme
# ------------------------------
edu_file = st.file_uploader("ðŸ“˜ EÄŸitim DosyasÄ±", type=["docx", "pdf", "txt", "md"], key="edu")
ty_file = st.file_uploader("ðŸ›  Teknik & YÃ¶ntemler DosyasÄ±", type=["docx", "pdf", "txt", "md"], key="ty")

edu_text, tech_text = "", ""
if edu_file:
    edu_text = read_file(edu_file)
if ty_file:
    tech_text = read_file(ty_file)

# Ã–nizleme
if edu_text:
    st.subheader("ðŸ“˜ EÄŸitim DosyasÄ± Ä°Ã§eriÄŸi (ilk 500 karakter)")
    st.code(edu_text[:500])
if tech_text:
    st.subheader("ðŸ›  Teknik & YÃ¶ntemler DosyasÄ± Ä°Ã§eriÄŸi (ilk 500 karakter)")
    st.code(tech_text[:500])

# ------------------------------
# Debug Test
# ------------------------------
if st.button("ðŸš€ GPT Okuma Testi Yap"):
    if not client:
        st.error("API anahtarÄ± girilmedi.")
    elif not edu_text and not tech_text:
        st.error("En az bir dosya yÃ¼klemelisin.")
    else:
        with st.spinner("GPTâ€™ye test sorusu gÃ¶nderiliyor..."):
            # EÄŸitim dosyasÄ±ndan rastgele bir snippet seÃ§elim
            combined_text = (edu_text + "\n" + tech_text).strip()
            snippet = get_random_snippet(combined_text, length=8)

            system_prompt = f"""
Sen bir test asistanÄ±sÄ±n. Sana verilen metinleri dikkatle oku.
Az sonra sana metinlerden alÄ±nmÄ±ÅŸ kÃ¼Ã§Ã¼k bir parÃ§a gÃ¶stereceÄŸim.
GÃ¶revin: Bu parÃ§anÄ±n gerÃ§ekten sana verilen metinlerde geÃ§ip geÃ§mediÄŸini sÃ¶ylemek.
""".strip()

            user_prompt = f"""
# METÄ°NLER
{combined_text}

# TEST PARÃ‡ASI
"{snippet}"

Bu parÃ§a yukarÄ±daki metinlerde geÃ§iyor mu? Evet ya da hayÄ±r olarak cevap ver ve hangi baÄŸlamda geÃ§tiÄŸini aÃ§Ä±kla.
"""

            try:
                resp = client.chat.completions.create(
                    model="gpt-4o-mini",
                    messages=[
                        {"role": "system", "content": system_prompt},
                        {"role": "user", "content": user_prompt},
                    ],
                    temperature=0.0,
                )
                answer = resp.choices[0].message.content.strip()
                st.success("âœ… GPTâ€™den YanÄ±t AlÄ±ndÄ±")
                st.write("**SeÃ§ilen snippet:**", snippet)
                st.markdown("---")
                st.write(answer)
            except Exception as e:
                st.error(f"OpenAI hatasÄ±: {e}")
